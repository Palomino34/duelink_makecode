<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="W0kVR-O1;!o49.wTr^cU" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="4`dI8uDB~`$$v3,yb!iC"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace DUELink {" line1="    let _str_response: string" line2="    let _value_response: number" line3="    let _timeout: number" line4="    let _doSync = false" line5="    //% block=&quot;Set timeout to %timeout&quot;" line6="    export function SetTimeout(timeout: number) {" line7="        _timeout = timeout" line8="    }" line9="    //% block=&quot;Execute command %text&quot;" line10="    export function ExecuteCommand(str: string): number {" line11="        if (_doSync===false){" line12="            Sync() // sync first Execute" line13="            _doSync = true" line14="        }" line15="        " line16="        pins.i2cWriteBuffer(0x52, Buffer.fromUTF8(str), false);" line17="        let buf = pins.createBuffer(1)" line18="        buf[0] = 10" line19="        pins.i2cWriteBuffer(0x52, buf)" line20="        return ReadResponse()" line21="    }" line22="" line23="    //% block=&quot;Read reponse&quot;" line24="    export function ReadResponse(): number {" line25="        _value_response = -1" line26="        _str_response = &quot;&quot;" line27="        let timeout = _timeout" line28="" line29="        while (_value_response != 10 &amp;&amp; timeout &gt; 0) {" line30="            _value_response = pins.i2cReadNumber(82, NumberFormat.UInt8LE, false)" line31="            //\r is not put added because &lt; 32" line32="            if (_value_response &gt;= 32 &amp;&amp; _value_response &lt; 127) {" line33="                _str_response = &quot;&quot; + _str_response + String.fromCharCode(_value_response)" line34="                timeout = _timeout" line35="            } else {" line36="                pause(1)" line37="                timeout--" line38="            }" line39="        }" line40="        " line41="        // we only need number like: &quot;123\r\n&gt;&quot;. We only need number" line42="        // this will clear &gt; or any garbage then" line43="        pause(2) " line44="        _value_response = -1" line45="        while (_value_response != 255) {" line46="            _value_response = pins.i2cReadNumber(82, NumberFormat.UInt8LE, false)" line47="            pause(1)" line48="        }" line49="" line50="        if (_str_response.trim() === &quot;&quot;)" line51="            return -1" line52="" line53="        try {" line54="            const ret = parseFloat(_str_response);" line55="" line56="            if (isNaN(ret)) {" line57="                return -1;" line58="            }" line59="" line60="            return ret;" line61="        } " line62="        catch {" line63="            return -1" line64="        }" line65="" line66="        " line67="    }" line68="    //% blockHidden=1" line69="    function Sync() {" line70="        _value_response = -1" line71="        _str_response = &quot;&quot;" line72="        _timeout = 1000" line73="" line74="        let buf2 = pins.createBuffer(1)" line75="        buf2[0] = 27" line76="        pins.i2cWriteBuffer(0x52, buf2)" line77="        pause(100)" line78="" line79="        buf2[0] = 10" line80="        pins.i2cWriteBuffer(0x52, buf2)" line81="        pause(10)" line82="        " line83="        ReadResponse()" line84="    }" line85="" line86="" line87="" line88="}" numlines="89"></mutation></block></statement></block></xml>