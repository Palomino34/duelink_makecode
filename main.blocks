<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="KXh?MH=CB+bY*^t{Ht;3" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id=":#hF]!x)T92a~Ifyb8Xe"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace DUELink {" line1="    let _str_response: string" line2="    let _value_response: number" line3="    let _timeout: number" line4="    let _doSync: boolean" line5="" line6="    //% block=&quot;Set timeout to %timeout&quot;" line7="    export function SetTimeout(timeout: number) {" line8="        _timeout = timeout" line9="    }" line10="    //% block=&quot;Execute command %text&quot;" line11="    export function ExecuteCommand(str: string): number {" line12="        if (!_doSync) {" line13="            _str_response = &quot;&quot;" line14="            _value_response = -1" line15="            _timeout = 1000" line16="            Sync() // sync first Execute" line17="            _doSync = true" line18="        }" line19="               " line20="        pins.i2cWriteBuffer(0x52, Buffer.fromUTF8(str), false);" line21="        let buf = pins.createBuffer(1)" line22="        buf[0] = 10" line23="        pins.i2cWriteBuffer(0x52, buf)  " line24="" line25="        let reponse = ReadResponse()" line26="" line27="        if (reponse.trim() === &quot;&quot;)" line28="            return -1" line29="" line30="        try {" line31="            const ret = parseFloat(reponse);" line32="" line33="            if (isNaN(ret)) {" line34="" line35="                return -1;" line36="            }" line37="" line38="            return ret;" line39="        }" line40="        catch {" line41="            return -1" line42="        }" line43="    }" line44="" line45="    //% block=&quot;Execute command raw %text&quot;" line46="    export function ExecuteCommandRaw(str: string): string {" line47="        if (!_doSync) {" line48="            _str_response = &quot;&quot;" line49="            _value_response = -1" line50="            _timeout = 1000" line51="            Sync() // sync first Execute" line52="            _doSync = true" line53="        }" line54="" line55="        pins.i2cWriteBuffer(0x52, Buffer.fromUTF8(str), false);" line56="        let buf2 = pins.createBuffer(1)" line57="        buf2[0] = 10" line58="        pins.i2cWriteBuffer(0x52, buf2)" line59="        return ReadResponse()" line60="    }" line61="" line62="    //% block=&quot;Read reponse&quot;" line63="    export function ReadResponse(): string {" line64="        _value_response = -1" line65="        _str_response = &quot;&quot;" line66="        let timeout = _timeout" line67="      " line68="        while (_value_response != 10 &amp;&amp; timeout &gt; 0) {" line69="            _value_response = pins.i2cReadNumber(0x52, NumberFormat.UInt8LE, false)" line70="            //\r is not put added because &lt; 32" line71="            if (_value_response &gt;= 32 &amp;&amp; _value_response &lt; 127) {" line72="                _str_response = &quot;&quot; + _str_response + String.fromCharCode(_value_response)" line73="                timeout = _timeout" line74="            } else {" line75="                pause(1)" line76="                timeout--" line77="            }" line78="        }" line79="                " line80="        // we only need number like: &quot;123\r\n&gt;&quot;. We only need number" line81="        // this will clear &gt; or any garbage then" line82="        pause(2) " line83="        _value_response = -1" line84="        while (_value_response != 255) {" line85="            _value_response = pins.i2cReadNumber(82, NumberFormat.UInt8LE, false)" line86="            pause(1)" line87="        }" line88="" line89="        return _str_response" line90="    }" line91="    //% blockHidden=1" line92="    function Sync() {" line93="        _value_response = -1" line94="        _str_response = &quot;&quot;" line95="        _timeout = 1000" line96="" line97="        let buf22 = pins.createBuffer(1)" line98="        buf22[0] = 27" line99="        pins.i2cWriteBuffer(0x52, buf22)" line100="        pause(100)" line101="" line102="        buf22[0] = 10" line103="        pins.i2cWriteBuffer(0x52, buf22)" line104="        pause(10)" line105="        " line106="        ReadResponse()" line107="    }" line108="}" numlines="109"></mutation></block></statement></block></xml>