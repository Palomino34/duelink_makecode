<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="-*x]]Q_g;NacDkk?:qd~" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="%U@2HVj#3?ajF`SD;7DH"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace duelink {" line1="    let _str_response: string" line2="    let _value_response: number" line3="    let _timeout: number" line4="    let _doSync: boolean" line5="" line6="    //% block=&quot;Set timeout to %timeout&quot;" line7="    export function SetTimeout(timeout: number) {" line8="        _timeout = timeout" line9="    }" line10="    //% block=&quot;Execute command %text&quot;" line11="    export function ExecuteCommand(str: string): number {" line12="        if (!_doSync) {" line13="            _str_response = &quot;&quot;" line14="            _value_response = -1" line15="            _timeout = 1000" line16="            Sync() // sync first Execute" line17="            _doSync = true" line18="        }" line19="               " line20="        pins.i2cWriteBuffer(0x52, Buffer.fromUTF8(str), false);" line21="        let buf = pins.createBuffer(1)" line22="        buf[0] = 10" line23="        pins.i2cWriteBuffer(0x52, buf)        " line24="        return ReadResponse()" line25="    }" line26="" line27="    //% block=&quot;Read reponse&quot;" line28="    export function ReadResponse(): number {" line29="        _value_response = -1" line30="        _str_response = &quot;&quot;" line31="        let timeout = _timeout" line32="      " line33="        while (_value_response != 10 &amp;&amp; timeout &gt; 0) {" line34="            _value_response = pins.i2cReadNumber(0x52, NumberFormat.UInt8LE, false)" line35="            //\r is not put added because &lt; 32" line36="            if (_value_response &gt;= 32 &amp;&amp; _value_response &lt; 127) {" line37="                _str_response = &quot;&quot; + _str_response + String.fromCharCode(_value_response)" line38="                timeout = _timeout" line39="            } else {" line40="                pause(1)" line41="                timeout--" line42="            }" line43="        }" line44="                " line45="        // we only need number like: &quot;123\r\n&gt;&quot;. We only need number" line46="        // this will clear &gt; or any garbage then" line47="        pause(2) " line48="        _value_response = -1" line49="        while (_value_response != 255) {" line50="            _value_response = pins.i2cReadNumber(82, NumberFormat.UInt8LE, false)" line51="            pause(1)" line52="        }" line53="" line54="        " line55="        if (_str_response.trim() === &quot;&quot;)" line56="" line57="            " line58="            return -1" line59="" line60="        try {" line61="            const ret = parseFloat(_str_response);" line62="" line63="            if (isNaN(ret)) {" line64="                " line65="                return -1;" line66="            }" line67="" line68="            " line69="            return ret;" line70="        } " line71="        catch {" line72="            " line73="            return -1" line74="        }" line75="" line76="        " line77="    }" line78="    //% blockHidden=1" line79="    function Sync() {" line80="        _value_response = -1" line81="        _str_response = &quot;&quot;" line82="        _timeout = 1000" line83="" line84="        let buf2 = pins.createBuffer(1)" line85="        buf2[0] = 27" line86="        pins.i2cWriteBuffer(0x52, buf2)" line87="        pause(100)" line88="" line89="        buf2[0] = 10" line90="        pins.i2cWriteBuffer(0x52, buf2)" line91="        pause(10)" line92="        " line93="        ReadResponse()" line94="    }" line95="" line96="" line97="" line98="}" numlines="99"></mutation></block></statement></block></xml>