<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="Ztnh5KTPn!ih]LWMyGTy" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="@Fl%7l[L2wU_;R.M,+CM"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace DUELink {" line1="    let _str_response: string" line2="    let _value_response: number" line3="    let _timeout: number" line4="    let _doSync: boolean" line5="" line6="    //% block=&quot;Set response timeout to %timeout milliseconds&quot;" line7="    //% timeout.defl=1000" line8="    export function SetTimeout(timeout: number) {" line9="        _timeout = timeout" line10="    }" line11="    //% block=&quot;Execute command %text return number&quot;" line12="    //% text.defl=&quot;dread(1,2)&quot;" line13="    export function ExecuteCommand(text: string ): number {" line14="        if (!_doSync) {" line15="            _str_response = &quot;&quot;" line16="            _value_response = -1" line17="            _timeout = 1000" line18="            Sync() // sync first Execute" line19="            _doSync = true" line20="        }" line21="               " line22="        pins.i2cWriteBuffer(0x52, Buffer.fromUTF8(text), false);" line23="        let buf = pins.createBuffer(1)" line24="        buf[0] = 10" line25="        pins.i2cWriteBuffer(0x52, buf)  " line26="" line27="        let reponse = ReadResponse()" line28="" line29="        if (reponse.trim() === &quot;&quot;)" line30="            return -1" line31="" line32="        try {" line33="            const ret = parseFloat(reponse);" line34="" line35="            if (isNaN(ret)) {" line36="" line37="                return -1;" line38="            }" line39="" line40="            return ret;" line41="        }" line42="        catch {" line43="            return -1" line44="        }" line45="    }" line46="" line47="    //% block=&quot;Execute command %text return string&quot;" line48="    //% text.defl=&quot;version()&quot;" line49="    export function ExecuteCommandRaw(text: string): string {" line50="        if (!_doSync) {" line51="            _str_response = &quot;&quot;" line52="            _value_response = -1" line53="            _timeout = 1000" line54="            Sync() // sync first Execute" line55="            _doSync = true" line56="        }" line57="" line58="        pins.i2cWriteBuffer(0x52, Buffer.fromUTF8(text), false);" line59="        let buf2 = pins.createBuffer(1)" line60="        buf2[0] = 10" line61="        pins.i2cWriteBuffer(0x52, buf2)" line62="        return ReadResponse()" line63="    }" line64="" line65="    //% block=&quot;Execute command %text&quot;" line66="    //% text.defl=&quot;statled(100,100,10)&quot;" line67="    export function ExecuteCommandNoReturn(text: string): void {" line68="        if (!_doSync) {" line69="            _str_response = &quot;&quot;" line70="            _value_response = -1" line71="            _timeout = 1000" line72="            Sync() // sync first Execute" line73="            _doSync = true" line74="        }" line75="" line76="        pins.i2cWriteBuffer(0x52, Buffer.fromUTF8(text), false);" line77="        let buf22 = pins.createBuffer(1)" line78="        buf22[0] = 10" line79="        pins.i2cWriteBuffer(0x52, buf22)" line80="        ReadResponse()" line81="    }" line82="" line83="    //% block=&quot;Read reponse&quot;" line84="    export function ReadResponse(): string {" line85="        _value_response = -1" line86="        _str_response = &quot;&quot;" line87="        let timeout = _timeout" line88="      " line89="        while (_value_response != 10 &amp;&amp; timeout &gt; 0) {" line90="            _value_response = pins.i2cReadNumber(0x52, NumberFormat.UInt8LE, false)" line91="            //\r is not put added because &lt; 32" line92="            if (_value_response &gt;= 32 &amp;&amp; _value_response &lt; 127) {" line93="                _str_response = &quot;&quot; + _str_response + String.fromCharCode(_value_response)" line94="                timeout = _timeout" line95="            } else {" line96="                pause(1)" line97="                timeout--" line98="            }" line99="        }" line100="                " line101="        // we only need number like: &quot;123\r\n&gt;&quot;. We only need number" line102="        // this will clear &gt; or any garbage then" line103="        pause(2) " line104="        _value_response = -1" line105="        while (_value_response != 255) {" line106="            _value_response = pins.i2cReadNumber(82, NumberFormat.UInt8LE, false)" line107="            pause(1)" line108="        }" line109="" line110="        return _str_response" line111="    }" line112="" line113="    //% block=&quot;Write bytes $data to $array_name&quot;" line114="    //% array_name.defl=&quot;b1&quot;" line115="    //% data.defl=[1, 2, 3]" line116="    export function WriteBytes(array_name: string, data: number[]): number {" line117="        const count = data.length" line118="        const cmd = `strmwr(${array_name},${count})`;" line119="" line120="        WriteCommand(cmd)" line121="" line122="        _value_response = -1" line123="        _str_response = &quot;&quot;" line124="        let timeout2 = _timeout" line125="" line126="        while (_value_response != 38 &amp;&amp; timeout2 &gt; 0) { // 38 is &amp;" line127="            _value_response = pins.i2cReadNumber(0x52, NumberFormat.UInt8LE, false)" line128="            pause(1)" line129="            timeout2--" line130="        }" line131="" line132="        if (timeout2 == 0)" line133="            return -1" line134="" line135="        WriteRawData(data)        " line136="        ReadResponse()" line137="        return count" line138="    }" line139="" line140="    //% block=&quot;Read bytes $data to $array_name&quot;" line141="    //% array_name.defl=&quot;b1&quot;" line142="    //% data.defl=[0]" line143="    export function ReadBytes(array_name: string, data: number[]): number {" line144="        const count2 = data.length" line145="        const cmd2 = `strmrd(${array_name},${count2})`;" line146="" line147="        WriteCommand(cmd2)" line148="" line149="        _value_response = -1" line150="        _str_response = &quot;&quot;" line151="        let timeout3 = _timeout" line152="" line153="        while (_value_response != 38 &amp;&amp; timeout3 &gt; 0) { // 38 is &amp;" line154="            _value_response = pins.i2cReadNumber(0x52, NumberFormat.UInt8LE, false)" line155="            pause(1)" line156="            timeout3--" line157="        }" line158="" line159="        if (timeout3 == 0)" line160="            return -1" line161="" line162="        ReadRawData(data, 0, count2)" line163="        ReadResponse()" line164="        return count2" line165="    }" line166="" line167="    //% block=&quot;Write float $data to $array_name&quot;" line168="    //% array_name.defl=&quot;a1&quot;" line169="    //% data.defl=[1.0, 1.0, 2.0]" line170="    export function WriteFloats(array_name: string, data: number []): number {" line171="        const count3 = data.length" line172="        const cmd3 = `strmwr(${array_name},${count3})`;" line173="" line174="        WriteCommand(cmd3)" line175="" line176="        _value_response = -1" line177="        _str_response = &quot;&quot;" line178="        let timeout4 = _timeout" line179="" line180="        while (_value_response != 38 &amp;&amp; timeout4 &gt; 0) { // 38 is &amp;" line181="            _value_response = pins.i2cReadNumber(0x52, NumberFormat.UInt8LE, false)" line182="            pause(1)" line183="            timeout4--" line184="        }" line185="" line186="        if (timeout4 == 0)" line187="            return -1" line188="" line189="        for (let i = 0; i &lt; data.length; i++) {" line190="            let buffer = control.createBuffer(4);" line191="            buffer.setNumber(NumberFormat.Float32LE, 0, data[i]);" line192="" line193="            WriteRawData([buffer[0], buffer[1], buffer[2], buffer[3]]);" line194="        }" line195="" line196="        ReadResponse()" line197="        return count3" line198="    }" line199="" line200="    " line201="" line202="    /**" line203="     * To be continue" line204="     */" line205="    //% blockHidden=1" line206="    function WriteRawData(data: number[]): number {" line207="        let buf3 = pins.createBuffer(1)" line208="        for (let j = 0; j &lt; data.length; j++) {" line209="            let byte = Math.floor(data[j]) &amp; 0xFF;" line210="            buf3[0] = byte" line211="            pins.i2cWriteBuffer(0x52, buf3)" line212="        }" line213="" line214="        return data.length" line215="    }" line216="" line217="    /**" line218="     * To be continue" line219="     */" line220="    //% blockHidden=1" line221="    function ReadRawData(data: number[], offset: number, count: number): number {" line222="        let timeout5 = _timeout;" line223="        let k = 0;" line224="" line225="        while (k &lt; count) {" line226="            data[offset + k] = pins.i2cReadNumber(0x52, NumberFormat.UInt8LE, false)" line227="            k = k + 1            " line228="            pause(1)" line229="        }" line230="" line231="        return count" line232="    }" line233="" line234="    /**" line235="     * To be continue" line236="     */" line237="    //% blockHidden=1" line238="    function WriteCommand(text: string): void {" line239="        if (!_doSync) {" line240="            _str_response = &quot;&quot;" line241="            _value_response = -1" line242="            _timeout = 1000" line243="            Sync() // sync first Execute" line244="            _doSync = true" line245="        }" line246="" line247="        pins.i2cWriteBuffer(0x52, Buffer.fromUTF8(text), false);" line248="        let buf23 = pins.createBuffer(1)" line249="        buf23[0] = 10" line250="        pins.i2cWriteBuffer(0x52, buf23)        " line251="    }" line252="    " line253="    //% blockHidden=1" line254="    function Sync() {" line255="        _value_response = -1" line256="        _str_response = &quot;&quot;" line257="        _timeout = 1000" line258="" line259="        let buf222 = pins.createBuffer(1)" line260="        buf222[0] = 27" line261="        pins.i2cWriteBuffer(0x52, buf222)" line262="        pause(100)" line263="" line264="        buf222[0] = 10" line265="        pins.i2cWriteBuffer(0x52, buf222)" line266="        pause(10)" line267="        " line268="        ReadResponse()" line269="    }" line270="}" numlines="271"></mutation></block></statement></block></xml>